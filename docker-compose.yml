version: '3.9'

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.1.0/24
          ip_range: 172.23.1.0/24
          gateway: 172.23.1.1
    driver_opts:
      com.docker.network.bridge.name: "igorsrv"

services:
  dcsm.igor:
    image: ghcr.io/igor47/dcsm:v0.3.0
    environment:
      - DCSM_KEYFILE=/secrets/key.private
      - DCSM_SECRETS_FILE=/secrets/secrets.encrypted
      - DCSM_SOURCE_FILE=/secrets/secrets.yaml
      - DCSM_TEMPLATE_DIR=/config
      - DCSM_TEMPLATE_DIR2=/init_scripts
    volumes:
      - ./secrets:/secrets
      - ./config:/config
      - ./init_scripts:/init_scripts

  traefik.igor:
    image: traefik:v2.9
    restart: unless-stopped
    labels:
      traefik.enable: true
      service.owner: igor
      traefik.http.routers.traefik.rule: "Host(`traefik.igor.moomers.org`)"
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: authentik@file
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.tls.certresolver: le
      traefik.http.routers.traefik.entrypoints: https
    ports:
      - "173.236.34.123:80:80"
      - "173.236.34.123:443:443"
      - "173.236.34.123:22047:22047"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/traefik:/etc/traefik
      - ./storage/traefik/acme:/acme

  miniflux.igor:
    image: miniflux/miniflux:latest
    restart: unless-stopped
    labels:
      traefik.enable: true
      service.owner: igor
      traefik.http.routers.miniflux.rule: "Host(`miniflux.igor.moomers.org`)"
      traefik.http.routers.miniflux.tls: true
      traefik.http.routers.miniflux.tls.certresolver: le
      traefik.http.routers.miniflux.entrypoints: https
    depends_on:
      dcsm.igor:
        condition: service_completed_successfully
      postgres.igor:
        condition: service_healthy
    env_file:
      - ./config/miniflux/config.env

  postgres.igor:
    image: postgres:14.6
    restart: unless-stopped
    labels:
      traefik.enable: false
      service.owner: igor
    volumes:
      - ./storage/postgres/data:/var/lib/postgresql/data
      - ./init_scripts:/init_scripts
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      start_period: 30s
    stop_grace_period: 60s

  caddy:
    image: caddy:latest
    restart: unless-stopped
    labels:
      traefik.enable: true
      service.owner: igor
      traefik.http.services.caddy.loadbalancer.server.port: 8080
      traefik.http.routers.caddy.rule: "Host(`igor.moomers.org`,`igor47.moomers.org`,`igor.monksofcool.org`,`igor47.monksofcool.org`)"
      traefik.http.routers.caddy.tls: true
      traefik.http.routers.caddy.tls.certresolver: le
      traefik.http.routers.caddy.entrypoints: https
      traefik.http.routers.igor47.rule: "Host(`igor47.com`, `www.igor47.com`)"
      traefik.http.routers.igor47.tls: true
      traefik.http.routers.igor47.tls.certresolver: le
      traefik.http.routers.igor47.entrypoints: https
    volumes:
      - ./config/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ${HOME}/www:/www
      - ./storage/caddy/data:/data
      - ./storage/caddy/config:/config

  # syncthing
  syncthing.igor:
    image: syncthing/syncthing
    restart: unless-stopped
    hostname: syncthing.igor.moomers.org
    labels:
      traefik.enable: true
      service.owner: igor
      traefik.http.services.syncthing.loadbalancer.server.port: 8384
      traefik.http.routers.syncthing.rule: "Host(`syncthing.igor.moomers.org`)"
      traefik.http.routers.syncthing.tls: true
      traefik.http.routers.syncthing.tls.certresolver: le
      traefik.http.routers.syncthing.entrypoints: https
      traefik.http.routers.syncthing.middlewares: authentik@file
      traefik.tcp.routers.syncthingtcpr.entrypoints: syncthingtcpe
      traefik.tcp.routers.syncthingtcpr.service: syncthingtcps
      traefik.tcp.routers.syncthingtcpr.rule: "HostSNI(`*`)"
      traefik.tcp.routers.syncthingtcpr.tls.passthrough: true
      traefik.tcp.services.syncthingtcps.loadbalancer.server.port: 22000
      traefik.udp.routers.syncthingudpr.entrypoints: syncthingudpe
      traefik.udp.routers.syncthingudpr.service: syncthingudps
      traefik.udp.services.syncthingudps.loadbalancer.server.port: 22000
    environment:
      - PUID=1000
      - PGID=113
    volumes:
      - ./storage/syncthing:/var/syncthing
      # actual directories we want to sync to other machines
      - ${HOME}/Sync:/synced/Sync
      - ${HOME}/documents:/synced/documents
      - ${HOME}/Downloads:/synced/Downloads
      - /media/music:/synced/music
      - ${HOME}/DCIM/chirper:/synced/chirper
      - ${HOME}/DCIM/turboscan:/synced/turboscan
      - ${HOME}/DCIM/local:/synced/local
    #ports:
    #  - "22000/tcp" # TCP file transfers
    #  - "22000/udp" # QUIC file transfers
    #  - "21027:21027/udp" # Receive local discovery broadcasts

  # my blog
  blog.igor:
    image: ghcr.io/igor47/blog:latest
    restart: unless-stopped
    hostname: blog.igor.moomers.org
    labels:
      traefik.enable: true
      service.owner: igor
      traefik.http.routers.blog.rule: "Host(`blog.igor.moomers.org`)"
      traefik.http.routers.blog.tls: true
      traefik.http.routers.blog.tls.certresolver: le
      traefik.http.routers.blog.entrypoints: https
    expose:
      - "3000"

  # proxy outpost for authentik
  authentik.proxy.igor:
    image: ghcr.io/goauthentik/proxy
    restart: unless-stopped
    environment:
      AUTHENTIK_HOST: https://auth.moomers.org
      AUTHENTIK_INSECURE: "false"
    env_file:
      ./storage/authentik/env
    labels:
      service.owner: igor
      traefik.enable: true
      traefik.http.routers.authentik.rule: "HostRegexp(`{subdomain:[a-z]+}.igor.moomers.org`) && PathPrefix(`/outpost.goauthentik.io/`)"
